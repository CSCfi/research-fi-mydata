@{
    ViewData["Title"] = "TTV AI POC";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>AI POC</h1>
<h2>Get profile data</h2>

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger">
        @ViewBag.ErrorMessage
    </div>
}

<form id="orcidForm" class="mb-4">
    <div class="form-group mb-3">
        <label for="orcid" class="form-label">ORCID:</label>
        <input type="text" id="orcid" name="orcid" class="form-control" placeholder="Enter ORCID here..." />
    </div>
    <div class="form-group">
        <button type="submit" id="submitOrcid" class="btn btn-primary" disabled>Get profile data</button>
    </div>
</form>

<hr class="my-5" />

<h2>Query AI model</h2>

<form id="promptForm" class="mb-4">
    <div class="form-group mb-3">
        <label for="prompt" class="form-label">Model instructions:</label>

        <!-- System prompt -->
        <textarea id="systemPrompt" name="systemPrompt" class="form-control" rows="5" placeholder="Enter prompt here..."
        >Create summarized researcher biography.</textarea>

        <!-- Profile data viewer -->
        <label for="profileDataViewer" class="form-label mt-3">Profile Data:</label>
        <div id="profileDataViewer" class="json-container border p-3" style="background-color: #f8f9fa; max-height: 600px; overflow-y: auto;"></div>

        <!-- Profile data parameter -->
        <input type="hidden" id="profileData" name="profileData" />

        <!-- Max output token count -->
        <label for="maxOutputTokenCount" class="form-label mt-3">Max output token count:</label>
        <input type="number" id="maxOutputTokenCount" name="maxOutputTokenCount" class="form-control" value="500" min="1" max="4000" />
    </div>
    <div class="form-text mb-3">Model instructions and profile data together form the prompt sent to the AI model.</div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Query AI model</button>
    </div>
</form>

@section RightColumn {
    <h2>Query result</h2>
    <hr class="my-4" />
    <div id="result2" class="mt-4"></div>
}




@section Scripts {
    <script>
        const orcidInput = document.getElementById("orcid");
        const submitButton = document.getElementById("submitOrcid");

        // Enable/disable the submit button based on input value
        orcidInput.addEventListener("input", function () {
            submitButton.disabled = !orcidInput.value.trim();
        });

        document.getElementById("orcidForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            // Clear previous profile data
            const profileDataContainer = document.getElementById("profileDataViewer");
            profileDataContainer.innerHTML = "";

            // Get profile data for the given ORCID
            const formData = new FormData(this);
            const profileDataResponse = await fetch("/AiPoc/GetProfileDataForPrompt", {
                method: "POST",
                body: formData
            });

            
            const profileDataResult = await profileDataResponse.text();

            // Set profile data in hidden input for form submission
            document.getElementById("profileData").value = profileDataResult;

            // Set profile data in the JSON viewer
            try {
                // Attempt to pretty-print JSON
                const jsonData = JSON.parse(profileDataResult);
                $(profileDataContainer).jsonViewer(jsonData, { collapsed: true }); // Collapsed by default
            } catch (error) {
                // If not valid JSON, display raw text
                profileDataContainer.textContent = profileDataResult;
            }
        });

        document.getElementById("promptForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const resultContainer = document.getElementById("result2");
            const promptFormData = new FormData(this);

            // Show loading indicator
            resultContainer.innerHTML = "<div class='spinner-border text-primary' role='status'><span class='visually-hidden'>Loading...</span></div>";

            try {
                const response = await fetch("/AiPoc/QueryAiModel", {
                    method: "POST",
                    body: promptFormData
                });

                const markdownResult = await response.text();

                // Convert Markdown to HTML and render it
                const htmlResult = marked.parse(markdownResult);
                resultContainer.innerHTML = htmlResult;
            } catch (error) {
                resultContainer.innerHTML = `<div class='alert alert-danger'>Error: ${error.message}</div>`;
            }
        });
    </script>
}